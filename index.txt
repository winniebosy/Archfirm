Accessibility Issues encountered when tackling this project



The use of Buttons and links
Rule: Actions where users affect the website’s back-end or front-end use Buttons.
      Actions where users won’t affect the website at all use links.
Read more here: https://uxmovement.com/buttons/when-to-use-a-button-or-link/


ARIA-LABELS ON LINKS:
Use an aria-label attribute in the link code that provides specific information to the screen reader user.
eXAMPLE: <p><a href=”taxhike.html” aria-label=”Read more about Marlborough tax hike”>Read more…</a></p>

READ MORE HERE: https://accessiblewebsiteservices.com/accessible-links-when-to-use-aria-labels/




First of all, what’s a CTA?

CTA stands for call-to-action and refers to the prompt for users to take an action. It can be a button, a hyperlink, or even an image but the text generally denotes the action you want a user to take. 
read more here : https://uxcontent.com/learn-more-is-not-enough-a-case-for-descriptive-cta/
 


 Embedding an accessible email to us:
 <a href="mailto:info@example.com?subject=subject&cc=cc@example.com">
            <img src="Images/envelope-regular.svg" alt="Email us">
        </a>


this can be used to change the color of an svg as desired.put directly in the svg code
fill="var(--svgcolor)"



Grid areas offer developers with ease in coming up with responsive sites.


Screen readers and other assistive technology, just as web browsers, hide elements from their users when they are styled using display: none; and visibility: hidden;.

The common approach used to hide information visually but keep them available to screen reader and other assistive technology users is to use CSS that will keep the information technically visible but practically hidden. For example, presenting the label in a 1-by-1 pixel area, as demonstrated with the CSS class visuallyhidden (do not confuse with CSS visibility: hidden) below:
Code Snippet

.visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

Note that interactive elements are still active when using this code, so it is not suitable to hide other parts of forms but the labels.


Javascript trap focus;
more notes on this link : https://hidde.blog/using-javascript-to-trap-focus-in-an-element/


aria-labelledBy is used to provide titles to non-iteractive elements/ non-semantic elements.
aria-describeby is used to provide descriptions to non-semantic elements 
 example
 div role="dialog" aria-labelledby="dialog-title" aria-describedby="dialog-description">
  <header>
    <h1 id="dialog-title">Name Entry</h1>
    <p id="dialog-description">Please enter your full name.</p>
  </header>



  js active elements 
  document.activeElement helps us find the active element.
  Active Elements are the HTML elements that have recently been focused on by the user. If a user clicks on a button that means the button was focused or it was active.
  more information here : https://www.educative.io/answers/what-is-the-html-activeelement-property
  also here: https://dev.to/open-wc/mind-the-document-activeelement-2o9a



  To hide an element from a screen reader add the attribute aria-hidden ="true". However, ensure that you do not put an icon/image or whatever graphics inside a focusable element. This is because the screen reader will still access it. The best approach is to wrap the element inside a div tag with the focusable element as a sibling.
  example
  <div class="back-home-page">
            <span aria-hidden="true">&#x2190;</span>
            <a href="index.html" aria-label="Back to Home Page">
                 Home Page

            </a>
        </div>


Learning tables is interesting. You cannot include <p></p>/ block elements inside data tables. Thus, the only options left is use of <span></span> with an id then visually hidding it. So that it is next to the <caption></caption>.
Even for providing aria-describedby for imag alt with long descriptions use span with an id.
<summary></summary> for tables in html5 is depreciated. It is not supported.
Further information on tables and captions can be found here:https://www.w3.org/WAI/tutorials/tables/caption-summary/
